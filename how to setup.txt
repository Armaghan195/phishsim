download the content from the repository,

open folder in vscode (project)

//goto phishsim-backend

cd phishsim-backend

//type in terminal

Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned //do this only if the below command doesnot work

python -m venv venv

.\venv\Scripts\Activate.ps1  //run it before running the server
                                                      //1by1



pip install flask flask-cors scikit-learn pandas numpy joblib requests tld feature-engine xgboost

//before installing these below, try to run the server,
pip install joblib

pip install scikit-learn

pip install flask //if slask doesn't install

//the file structure should be like this:
PROJECTS/
â”‚
â”œâ”€â”€ pishsim/                             # ðŸ“¦ Chrome Extension Frontend
â”‚   â”œâ”€â”€ images/                          # (Optional) Icons or assets
â”‚   â”œâ”€â”€ background.js                    # Background script for extension
â”‚   â”œâ”€â”€ content.js                       # Script injected into webpages
â”‚   â”œâ”€â”€ manifest.json                    # Chrome extension config
â”‚   â”œâ”€â”€ popup.html                       # UI for extension popup
â”‚   â”œâ”€â”€ popup.js                         # Logic for popup interactions
â”‚   â”œâ”€â”€ report.html                      # Page for phishing reports
â”‚   â”œâ”€â”€ report.js                        # Logic for reporting
â”‚   â”œâ”€â”€ safelist.html                    # Whitelisted safe URLs UI
â”‚   â”œâ”€â”€ safelist.js                      # Logic for safelist
â”‚   â”œâ”€â”€ settings.html                    # Extension settings page
â”‚   â”œâ”€â”€ settings.js                      # JS for settings UI
â”‚   â””â”€â”€ styles.css                       # Global extension styling
â”‚
â”œâ”€â”€ pishsim-backend/                     # ðŸ§  Flask + ML Backend
â”‚   â”œâ”€â”€ venv/                            # Python virtual environment
â”‚   â”œâ”€â”€ app.py                           # Main Flask API
â”‚   â”œâ”€â”€ feature_names.pkl                # Feature names for model explanation
â”‚   â”œâ”€â”€ model_check.py                   # Script to test model loading/prediction
â”‚   â”œâ”€â”€ model_info.json                  # Extra metadata about the model
â”‚   â”œâ”€â”€ phishing_dataset.csv             # Dataset (10k rows)
â”‚   â”œâ”€â”€ phishing_model.pkl               # Trained ML model
â”‚   â”œâ”€â”€ run_server.sh                    # Script to launch Flask server (Linux)
â”‚   â”œâ”€â”€ tfidf_vectorizer.pkl             # TF-IDF vectorizer used for model
â”‚   â””â”€â”€ train_model.py                   # Script to train model on dataset

//after installation run the server:
// make sure its says (venv) before your directory,
python app.py



// open a new terminal and Run the code to test if server running or not:

Invoke-RestMethod -Uri "http://localhost:5000/check_url" `
  -Method POST `
  -Body '{"url": "http://instagrum.com"}' `
  -ContentType "application/json"




Invoke-RestMethod -Uri "http://localhost:5000/check_url" `
  -Method POST `
  -Body '{"url": "http://secure-paypal.com-login.verify-update-account.info/"}' `
  -ContentType "application/json"








{ error: Uncaught (in promise) Error: Could not establish connection. Receiving end does not exist.
Context
background.js
Stack Trace
background.js:0 (anonymous function)
Nothing to see here, move along. }

This error occurs in all Chrome extensions when:

A chrome.runtime.sendMessage(...) is sent...

...but no listener is set up to receive it in the background script or content script at that moment

It's harmless in your case because:

Your popup.js doesnâ€™t expect a response from background.js on some occasions

Chrome logs it anyway as a warning






